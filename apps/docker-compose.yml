version: "3.8"

services:
  redpanda:
    container_name: redpanda
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.7
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
    ports:
      - 9092:9092
      - 9644:9644
      - 29092:29092
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - data-net

  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1
      interval: 5s
      timeout: 5s
      retries: 3

  console:
    container_name: console
    image: docker.redpanda.com/redpandadata/console:v2.2.3
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 9002:8080
    depends_on:
      - redpanda
    networks:
      - data-net

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - data-net
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        pid=$!;
        sleep 5;
        psql -U username -d postgres -c 'CREATE DATABASE account;';
        psql -U username -d postgres -c 'CREATE DATABASE article;';
        psql -U username -d postgres -c 'CREATE DATABASE analytics;';
        wait $pid;
      "

  repo-account:
    image: ghcr.io/therayquaza/newsbro/repo-account:repo-account-v1.2.7
    environment:
      DATABASE_HOST: postgres:5432
      PORT: 8081
      KAFKA_BROKER: redpanda:29092
      DATABASE_USERNAME: "username"
      DATABASE_PASSWORD: "password"
      DATABASE_NAME: "account"
      JWT_SECRET: "your-secret-key"
      OIDC_ISSUER_URL: "https://cri.epita.fr"
      OIDC_CLIENT_ID: "125070"
      OIDC_CLIENT_SECRET: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
      OIDC_REDIRECT_URL: "http://localhost:8080/complete/epita/"
      COOKIE_DOMAIN: ""
      LOGIN_REDIRECT_URL: "http://localhost:8080/api/v1/auth/login"
      OIDC_REDIRECT_FRONTEND_URL: "http://localhost:5173"
      ENVIRONMENT: "dev"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - redpanda
    networks:
      - data-net

  repo-article:
    image: ghcr.io/therayquaza/newsbro/repo-article:repo-article-v1.4.2
    env_file:
      - repo-article/.env
    environment:
      DATABASE_HOST: postgres:5432
      PORT: 8082
      KAFKA_BROKERS: redpanda:29092
      DATABASE_USERNAME: "username"
      DATABASE_PASSWORD: "password"
      DATABASE_NAME: "article"
      JWT_SECRET: "your-secret-key"
      KAFKA_TOPIC: "new-articles-command"
      KAFKA_GROUP_ID: "repo-article-group"
      ENVIRONMENT: "dev"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - redpanda
    networks:
      - data-net

volumes:
  redpanda:
  postgres_data:
  qdrant_storage:

networks:
  data-net:
