name: Python SVC Template

on:
  workflow_call:
    inputs:
      service_name:
        description: "The name of the service (e.g., srvc-inference)"
        required: true
        type: string
      dockerfile:
        description: "Path to the Dockerfile"
        required: true
        type: string
      context_root:
        description: "Root folder where model directories are located (e.g., apps/srvc-inference)"
        required: true
        type: string
      model_name:
        description: "Model name (used in tag parsing)"
        required: true
        type: string
    secrets:
      GHCR_TOKEN:
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/${{ inputs.service_name }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install lint tools
        run: |
          pip install ruff black mypy bandit

      - name: Run Ruff (lint + fix)
        run: ruff check . --fix
        working-directory: ${{ inputs.context_root }}/${{inputs.model_name }}

      - name: Run Black (format check)
        run: black --check .
        working-directory: ${{ inputs.context_root }}/${{inputs.model_name }}

      - name: Run mypy (type check)
        run: mypy .
        working-directory: ${{ inputs.context_root }}/${{inputs.model_name }}

      - name: Run Bandit (security check)
        run: bandit -c pyproject.toml -r ${{inputs.model_name }}
        working-directory: ${{ inputs.context_root }}

  test:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest
        working-directory: ${{ inputs.context_root }}/${{inputs.model_name }}

      - name: Run tests
        run: pytest -v
        working-directory: ${{ inputs.context_root }}/${{inputs.model_name }}

  build-docker:
    if: startsWith(github.ref, format('refs/tags/{0}-', inputs.service_name))
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: "v2.2.4"

      - uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,pattern=${{ inputs.service_name }}-${{ inputs.model_name }}-v{{version}}
            type=sha

      - id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context_root }}/${{ inputs.model_name }}
          file: ${{ inputs.dockerfile }}
          build-args: |
            model=${{ inputs.model_name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
